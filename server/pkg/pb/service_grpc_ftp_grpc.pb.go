// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.3
// source: service_grpc_ftp.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GrpcFtp_CreateUser_FullMethodName                  = "/grpc_ftp.GrpcFtp/CreateUser"
	GrpcFtp_LoginUser_FullMethodName                   = "/grpc_ftp.GrpcFtp/LoginUser"
	GrpcFtp_RenewUserAccessToken_FullMethodName        = "/grpc_ftp.GrpcFtp/RenewUserAccessToken"
	GrpcFtp_UpdateUserRefreshTokenBlock_FullMethodName = "/grpc_ftp.GrpcFtp/UpdateUserRefreshTokenBlock"
	GrpcFtp_ListSessions_FullMethodName                = "/grpc_ftp.GrpcFtp/ListSessions"
	GrpcFtp_Me_FullMethodName                          = "/grpc_ftp.GrpcFtp/Me"
)

// GrpcFtpClient is the client API for GrpcFtp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcFtpClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	RenewUserAccessToken(ctx context.Context, in *RenewUserAccessTokenRequest, opts ...grpc.CallOption) (*RenewUserAccessTokenResponse, error)
	UpdateUserRefreshTokenBlock(ctx context.Context, in *UpdateUserRefreshTokenBlockRequest, opts ...grpc.CallOption) (*NoParams, error)
	ListSessions(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*ListSessionsResponse, error)
	Me(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*MeResponse, error)
}

type grpcFtpClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcFtpClient(cc grpc.ClientConnInterface) GrpcFtpClient {
	return &grpcFtpClient{cc}
}

func (c *grpcFtpClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, GrpcFtp_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcFtpClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, GrpcFtp_LoginUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcFtpClient) RenewUserAccessToken(ctx context.Context, in *RenewUserAccessTokenRequest, opts ...grpc.CallOption) (*RenewUserAccessTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenewUserAccessTokenResponse)
	err := c.cc.Invoke(ctx, GrpcFtp_RenewUserAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcFtpClient) UpdateUserRefreshTokenBlock(ctx context.Context, in *UpdateUserRefreshTokenBlockRequest, opts ...grpc.CallOption) (*NoParams, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NoParams)
	err := c.cc.Invoke(ctx, GrpcFtp_UpdateUserRefreshTokenBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcFtpClient) ListSessions(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*ListSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSessionsResponse)
	err := c.cc.Invoke(ctx, GrpcFtp_ListSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcFtpClient) Me(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*MeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MeResponse)
	err := c.cc.Invoke(ctx, GrpcFtp_Me_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcFtpServer is the server API for GrpcFtp service.
// All implementations must embed UnimplementedGrpcFtpServer
// for forward compatibility
type GrpcFtpServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	RenewUserAccessToken(context.Context, *RenewUserAccessTokenRequest) (*RenewUserAccessTokenResponse, error)
	UpdateUserRefreshTokenBlock(context.Context, *UpdateUserRefreshTokenBlockRequest) (*NoParams, error)
	ListSessions(context.Context, *NoParams) (*ListSessionsResponse, error)
	Me(context.Context, *NoParams) (*MeResponse, error)
	mustEmbedUnimplementedGrpcFtpServer()
}

// UnimplementedGrpcFtpServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcFtpServer struct {
}

func (UnimplementedGrpcFtpServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedGrpcFtpServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedGrpcFtpServer) RenewUserAccessToken(context.Context, *RenewUserAccessTokenRequest) (*RenewUserAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewUserAccessToken not implemented")
}
func (UnimplementedGrpcFtpServer) UpdateUserRefreshTokenBlock(context.Context, *UpdateUserRefreshTokenBlockRequest) (*NoParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRefreshTokenBlock not implemented")
}
func (UnimplementedGrpcFtpServer) ListSessions(context.Context, *NoParams) (*ListSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}
func (UnimplementedGrpcFtpServer) Me(context.Context, *NoParams) (*MeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Me not implemented")
}
func (UnimplementedGrpcFtpServer) mustEmbedUnimplementedGrpcFtpServer() {}

// UnsafeGrpcFtpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcFtpServer will
// result in compilation errors.
type UnsafeGrpcFtpServer interface {
	mustEmbedUnimplementedGrpcFtpServer()
}

func RegisterGrpcFtpServer(s grpc.ServiceRegistrar, srv GrpcFtpServer) {
	s.RegisterService(&GrpcFtp_ServiceDesc, srv)
}

func _GrpcFtp_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcFtpServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcFtp_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcFtpServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcFtp_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcFtpServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcFtp_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcFtpServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcFtp_RenewUserAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewUserAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcFtpServer).RenewUserAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcFtp_RenewUserAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcFtpServer).RenewUserAccessToken(ctx, req.(*RenewUserAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcFtp_UpdateUserRefreshTokenBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRefreshTokenBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcFtpServer).UpdateUserRefreshTokenBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcFtp_UpdateUserRefreshTokenBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcFtpServer).UpdateUserRefreshTokenBlock(ctx, req.(*UpdateUserRefreshTokenBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcFtp_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcFtpServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcFtp_ListSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcFtpServer).ListSessions(ctx, req.(*NoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcFtp_Me_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcFtpServer).Me(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcFtp_Me_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcFtpServer).Me(ctx, req.(*NoParams))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcFtp_ServiceDesc is the grpc.ServiceDesc for GrpcFtp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcFtp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_ftp.GrpcFtp",
	HandlerType: (*GrpcFtpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _GrpcFtp_CreateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _GrpcFtp_LoginUser_Handler,
		},
		{
			MethodName: "RenewUserAccessToken",
			Handler:    _GrpcFtp_RenewUserAccessToken_Handler,
		},
		{
			MethodName: "UpdateUserRefreshTokenBlock",
			Handler:    _GrpcFtp_UpdateUserRefreshTokenBlock_Handler,
		},
		{
			MethodName: "ListSessions",
			Handler:    _GrpcFtp_ListSessions_Handler,
		},
		{
			MethodName: "Me",
			Handler:    _GrpcFtp_Me_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_grpc_ftp.proto",
}
